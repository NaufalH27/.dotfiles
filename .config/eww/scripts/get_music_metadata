#!/bin/bash

MUSIC_COVER_DIR="$HOME/.config/eww/img-bin/music-cover"
mkdir -p "$MUSIC_COVER_DIR"

PIPE_PATH="${MUSIC_COVER_DIR}/uri_pipes"
IMAGE_PATH="${MUSIC_COVER_DIR}/cover"
touch "$PIPE_PATH"
echo -n >  "$PIPE_PATH"

encode_img() {
    local img_data="$1"
    image_format=$(echo "$img_data" | sed -n 's/^data:image\/\([^;]*\);.*$/\1/p')
    encoding=$(echo "$img_data" | sed -n 's/^data:image\/[^;]*;\([^,]*\),.*$/\1/p')
    image_data=$(echo "$img_data" | sed 's/^data:image\/[^;]*;[^,]*,//')
    case $encoding in
        base64)
            echo "$image_data" | base64 -d > "${IMAGE_PATH}.${image_format}";;
        base32)
            echo "$image_data" | base32 -d > "${IMAGE_PATH}.${image_format}";;
        base16|hex)
            echo "$image_data" | xxd -r -p > "${IMAGE_PATH}.${image_format}";;
        *)
            return 1;;
    esac
    echo "$img_path"
}

get_file_extension() {
    local mime_type="$1"
    case "$mime_type" in
        image/jpeg) echo "jpg";;
        image/png) echo "png";;
        image/gif) echo "gif";;
        image/webp) echo "webp";;
        image/bmp) echo "bmp";;
        *) echo "unknown";;
    esac
}

download_image() {
    local img_uri="$1"
    mime_type=$(curl -sI "$img_uri" | grep -i 'Content-Type' | awk '{print $2}' | tr -d '\r')
    file_extension=$(get_file_extension "$mime_type")
    if [[ "$file_extension" == "unknown" ]]; then
        echo "Unknown file type for the link: $img_uri"
        return 1
    fi
    filename="${IMAGE_PATH}.${file_extension}"
    curl -s "$img_uri" -o "${filename}"
    echo "$filename"
}

get_img_uri() {
    img_uri=$(playerctl metadata | awk -F 'artUrl ' '{print $2}' | tr -d '\n' | xargs)
    if [[ "$img_uri" =~ ^No || -z "$img_uri" ]]; then
        return 1
    else
        echo "$img_uri"
    fi
}

send_new_uri() {
    echo "$1" > "${PIPE_PATH}"
}

print_metadata() {
    title=$(playerctl metadata --format '{{title}}' | sed 's/"/\\"/g' )
    artist=$(playerctl metadata --format '{{artist}}' | sed 's/"/\\"/g' )
    status=$(playerctl metadata --format '{{status}}' | sed 's/"/\\"/g' )
    echo "{ \"title\": \"$title\", \"artist\": \"$artist\", \"status\": \"$status\" }"
}

uri_cache=""
process() {
    img_uri="$(get_img_uri)"
    if [ $? -ne 0 ]; then
        echo "{ \"title\": \"\", \"artist\": \"\", \"status\": \"\" }"
        return
    fi
    
    if [[ "$uri_cache" == "$img_uri" ]]; then 
        print_metadata
        return
    fi
    
    if [[ "$img_uri" =~ ^https:// ]]; then
        img_path=$(download_image "$img_uri")
    elif [[ "$img_uri" =~ ^data:image ]]; then 
       img_path=$(encode_img "$img_uri")
       if [ $? -ne 0 ]; then
          return
       fi
    else
        img_path="$img_uri"
    fi
    send_new_uri "$img_path"
    print_metadata
    uri_cache="$img_uri"
}


cleanup() {
    pkill -P $$
    exit
}
trap cleanup SIGINT SIGTERM

process

playerctl --follow metadata | grep --line-buffered "artUrl" | while read -r line; do
    process
done &

playerctl --follow status | while read -r status_line; do
    process
done &

wait
