
(defvar ewwcli "./eww/target/release/eww")





(defwindow bar
            :monitor "eDP-1"
            :geometry (geometry :x "0%" :y "4px" :width "88%" :height "50px" :anchor "top center")
            :stacking "bg"
            :exclusive "true"
  (bar)
)


(defwidget bar []
  (box :class "bar" :orientation "h"
    (leftside)
    (center)
    (rightside)
    )
  )


;; ---------------------- left side --------------------------------
(defwidget leftside []
  (box :class "leftside" :orientation "h" :space-evenly "false" :spacing 20
    (workspaces)
     (music-player)
    
  )
)


(deflisten music_title :initial ""
  "playerctl --follow metadata --format '{{ title }}' || true")

(deflisten music_artist :initial ""
  "playerctl --follow metadata --format '{{ artist }}' || true")


(deflisten music_cover :initial ""
  "~/.config/eww/scripts/get_music_cover"
) 


(defwidget music-player []
  (overlay
  (box :class "music-background" :orientation "h" :halign "start" :space-evenly "false"
       :style "background-image: linear-gradient(115deg, transparent, rgba(30, 30, 46, 1)), url('${music_cover}');"
    (box :class "music-cover" :style "background-image: url('${music_cover}');")
    (box :class "music-label" :orientation "v" :halign "start" :space-evenly "false" :spacing 0
      (label  :limit-width 30 :xalign 0 :text "${music_title}")
      (label :class "music-artist" :limit-width 12 :xalign 0 :text "${music_artist}")
    )
  )
  )
)


(deflisten workspace_event :initial "{ \"max_active\": 6, \"table_style\" : [] }" "~/.config/eww/scripts/workspace_event")


(defwidget workspace_button [?number id]
    (button :onclick "hyprctl dispatch workspace ${id}"
            :style "${workspace_event.table_style[id] ?: ""}"
    ) 
)

(defwidget non_persistance_button [?number id] 
   (revealer :class "nonpersistance-button"
          :reveal "${workspace_event.max_active>=id ? "true" : "false"}"
          :style "${workspace_event.max_active>=id ? "opacity:1;" : "opacity:0;"}"
          :transition "slideright" 
          :duration "${workspace_event.max_active>=id ? (550+(10-id)*20)  : (70+(10-id)*50) }"
      (workspace_button :id id)
    ) 
  )

(defwidget workspaces []
  (box  :class "workspaces" :orientation "h" :height 45 :halign "start" :spacing 7 :space-evenly "false" :vexpand "false" :hexpand "false" 
    (workspace_button :id 1)
    (workspace_button :id 2)
    (workspace_button :id 3)
    (workspace_button :id 4)
    (workspace_button :id 5)
    (workspace_button :id 6)

  )
)

;; ---------------------- left side --------------------------------









;; ---------------------- center --------------------------------

(defpoll time :interval "10s"
  "date '+%H : %M'")

(defwidget center []
  (box :orientation "h" :space-evenly "false" :spacing 8
     :halign "center"
     (powermenu)
     (clocks)
     (search-bar)

  )
)

(defwidget border []
  (box :class "border" :orientation "h" :halign "center" 
    (label :text "|")
  )
)


(defwidget powermenu []
  (box :class "powermenu" :orientation "h" :halign "start" 
    (button "󰀻")
  )
)

(defwidget clocks []
  (box :space-evenly "false" :spacing 20
    :class "clock"
    :halign "center"
    (label :text "${time}")
  )
)

(defwidget search-bar []
  (box :class "search-bar"
    (button "")
  )
)

;; ---------------------- center --------------------------------








(deflisten AUDIO :initial "{}" "~/.config/eww/scripts/get_audio" )
(deflisten BRIGHTNESS :initial "{}" "~/.config/eww/scripts/get_brightness" )

(defpoll BATTERY :initial "{}" :interval "2s" ". ~/.config/eww/scripts/get_battery")
(defpoll NETWORK :initial "{}" :interval "2s" ". ~/.config/eww/scripts/get_network")


(defwidget rightside []
    (box :class "rightside" :orientation "h" :halign "end" :space-evenly "false" :spacing 17
      (system-info)
      (banner)
    )
)

(defwidget banner []
   (box :class "banner"
       (image 
      :path "banner-bin/anime-resized.gif"
     )
   )
)



(defvar reveal_volume "false")
(defvar reveal_mic "false")
(defvar reveal_brightness "false")
(defvar reveal_wifi "false")
(defvar reveal_battery "false")

(defwidget system-info []

  (box :class "system-info" :orientation "h" :halign "center" :space-evenly "false" :spacing 10

    (eventbox :class "volume-event-box" :onhover "${ewwcli} update reveal_volume=true" :onhoverlost "${ewwcli} update reveal_volume=false"
      (box :class "volume" :orientation "h" :halign "center" :space-evenly "false" 
        (label :text "${AUDIO.volume_icons}")
          (box :class "volume-value"
            (label :text "${AUDIO.volume_power}%")
          )
      )
    )

    (eventbox :class "brightness-event-box" :onhover "${ewwcli} update reveal_brightness=true" :onhoverlost "${ewwcli} update reveal_brightness=false"
      (box :class "brightness" :orientation "h" :halign "center" :space-evenly "false" 
        (label :text "${BRIGHTNESS.icons}")
          (box :class "brightness-value"
            (label :text "${BRIGHTNESS.level}%")
        )
      )
    )

    (eventbox :class "wifi-event-box" :onhover "${ewwcli} update reveal_wifi=true" :onhoverlost "${ewwcli} update reveal_wifi=false"
      (box :class "wifi" :space-evenly "false" :spacing 8
        (label :text  "${NETWORK.icons}")
          (box :class "wifi-value" :orientation "h" :halign "center" :space-evenly "false" 
            (label :text "${NETWORK.ssid}")
        )
      )
    )

    (eventbox :class "battery-event-box" :onhover "${ewwcli} update reveal_battery=true" :onhoverlost "${ewwcli} update reveal_battery=false"
      (box :class "battery" :space-evenly "false" :spacing 8
        (label :text  "${BATTERY.icons}")
          (box :class "battery-value" :orientation "h" :halign "center" :space-evenly "false" 
                (label :text "${BATTERY.capacity}%")
          )
      )
    )
  )
)




(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))


